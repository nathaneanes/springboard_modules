<?php

/**
 * Implements hook_views_query_alter().
 *
 * Apply date_popup-based filtering to the advocacy report's data export display.
 */
function springboard_export_views_query_alter(&$view, &$query) {
  if ($view->name != 'sba_action_submissions' || $view->current_display != 'views_data_export_1') {
    return;
  }

  $dw_field_map = _springboard_export_action_dw_to_drupal_field_map();

  // Apply sort and order from the drush sb-export-donations-csv (drush sb-edc) command:
  if (isset($view->drush_order) && isset($dw_field_map[$view->drush_order])) {
    $sort = isset($view->drush_sort) ? $view->drush_sort : 'asc';
    $order_by = $dw_field_map[$view->drush_order]['field']; 
    $order_info = array(
      'field' => $order_by,
      'direction' => $sort,
    );

    // If the drush command specifies an order then apply the view's default order secondarily:
    array_unshift($view->query->orderby, $order_info);
  }

  // Apply filters from the drush sb-export-message-actions-csv (drush sb-emac) command:
  if (isset($view->drush_filters) && is_array($view->drush_filters)) {
    foreach ($view->drush_filters as $filter_key => $filter_value) {
      if (isset($dw_field_map[$filter_key])) {
        $filter = $dw_field_map[$filter_key];

        // Wrap LIKE comparions in percent signs with special chars escaped:
        if ($filter['op'] == 'LIKE') {
          $filter_value = '%' . str_replace('%', '\%', $filter_value) . '%';
        }
        // Alter the filter value if needed:
        if (isset($filter['preprocess']) && function_exists($filter['preprocess'])) {
          $preprocess_function = $filter['preprocess'];
          $filter_value = $preprocess_function($filter_value);
        }
        // Apply the drush command's filter:
        $query->where[1]['conditions'][] = array(
          'field' => (!empty($filter['table']) ? $filter['table'] . '.' : '') . $filter['field'], 
          'value' => $filter_value,
          'operator' => $filter['op'],
        );
      }
    }
  }

  // Remove placeholder filters added in the data export display in order to set up required joins:
  foreach ($query->where[1]['conditions'] as $condition_key => $condition) {
    if ($condition['value'] == '%%') {
      unset($query->where[1]['conditions'][$condition_key]);
    }
  }

  // Re-index where conditions since placeholder filters will have been removed; this is just in case it matters:
  $query->where[1]['conditions'] = array_values($query->where[1]['conditions']);

  echo "\n\n" . print_r($query, 1) . "\n\n";
  // variable_set('joshtest', print_r($query, 1));
}

function _springboard_export_action_dw_to_drupal_field_map() {
  $prefix = 'users_webform_submissions__field_data'; // For clarity
  $map = array(
    'action_type'         => array('table' => 'node', 'field' => 'type', 'op' => 'LIKE'),
    'cid'                 => array('table' => $prefix . '_sbp_cid', 'field' => 'sbp_cid_value', 'op' => 'LIKE'),
    'created_at'          => array('table' => 'webform_submissions', 'field' => 'submitted', 'op' => '='),
    'contact_id'          => array('table' => $prefix . '_sbp_salesforce_contact_id', 'field' => 'sbp_salesforce_contact_id_value', 'op' => 'LIKE'),
    'device_browser'      => array('table' => $prefix . '_sbp_device_browser', 'field' => 'sbp_device_browser_value', 'op' => 'LIKE'),
    'device_name'         => array('table' => $prefix . '_sbp_device_name', 'field' => 'sbp_device_name_value', 'op' => 'LIKE'),
    'device_os'           => array('table' => $prefix . '_sbp_device_os', 'field' => 'sbp_device_os_value', 'op' => 'LIKE'),
    'device_type'         => array('table' => $prefix . '_sbp_device_type', 'field' => 'sbp_device_type_value', 'op' => 'LIKE'),
    'first_name'          => array('table' => $prefix . '_sbp_first_name', 'field' => 'sbp_first_name_value', 'op' => 'LIKE'),
    'form_id'             => array('table' => 'node', 'field' => 'nid', 'op' => '='),
    'initial_referrer'    => array('table' => $prefix . '_sbp_initial_referrer', 'field' => 'sbp_initial_referrer_value', 'op' => 'LIKE'),
    'last_name'           => array('table' => $prefix . '_sbp_last_name', 'field' => 'sbp_last_name_value', 'op' => 'LIKE'),
    'legislative_issues'  => array('table' => 'taxonomy_term_data_node', 'field' => 'tid', 'op' => '='),
    'ip_address'          => array('table' => 'webform_submissions', 'field' => 'remote_addr', 'op' => 'LIKE'),
    'mail'                => array('table' => 'users_webform_submissions', 'field' => 'mail', 'op' => 'LIKE'),
    'ms'                  => array('table' => $prefix . '_sbp_ms', 'field' => 'sbp_ms_value', 'op' => 'LIKE'),
    'organization_issues' => array('table' => 'taxonomy_term_data_node', 'field' => 'tid', 'op' => '='), 
    'referrer'            => array('table' => $prefix . '_sbp_referrer', 'field' => 'sbp_referrer_value', 'op' => 'LIKE'),
    'search_engine'       => array('table' => $prefix . '_sbp_search_engine', 'field' => 'sbp_search_engine_value', 'op' => 'LIKE'),
    'search_string'       => array('table' => $prefix . '_sbp_search_string', 'field' => 'sbp_search_string_value', 'op' => 'LIKE'), 
    'submission_id'       => array('table' => 'webform_submissions', 'field' => 'sid', 'op' => '='),
    'user_agent'          => array('table' => $prefix . '_sbp_user_agent', 'field' => 'sbp_user_agent_value', 'op' => 'LIKE'),
  );

  // Add value alteration function where appropriate:
  $map['created_at']['preprocess'] = 'strtotime';
  $map['legislative_issues']['preprocess'] = '_springboard_export_get_legislative_issues_tid';   
  $map['organization_issues']['preprocess'] = '_springboard_export_get_organization_issues_tid';   
  return $map;
}

/**
 * Helper vocabulary-specific functions to return the term ID for a term name:
 */
function _springboard_export_get_legislative_issues_tid($term_name) {
  $terms = taxonomy_get_term_by_name($term_name, 'sba_legislative_issues'); 
  if (is_array($terms)) {
    $term = array_shift($terms);
  }
  if (isset($term->tid)) {
    return $term->tid; 
  }
  return '';
}
function _springboard_export_get_organization_issues_tid($term_name) {
  $term = taxonomy_get_term_from_name($term_name, 'sba_organization_issues'); 
  if (is_array($terms)) {
    $term = array_shift($terms);
  }
  if (isset($term->tid)) {
    return $term->tid;   
  }
  return '';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Attach csv export-related jQuery and CSS
 */
function springboard_export_form_views_exposed_form_alter(&$form, &$form_state) {
  if (!isset($form['#id']) || $form['#id'] != 'views-exposed-form-sba-action-submissions-page') {
    return;
  }

  // Apply any filtering and sorting done to the view prior to export:
  $view_data = array('source_view' => 'sba_action_submissions');
  if (isset($form_state['input']) && is_array($form_state['input'])) {
    foreach ($form_state['input'] as $key => $value) {
      if (empty($value)) {
        continue;
      }
      switch ($key) {
        case 'sort':
          $view_data['sort'] = $value;
          break;
        case 'order':
          $view_data['order'] = $value;
          break;
        default:
          $view_data[$key] = $value;
          break;
      }
    }
  }
  
  // Attached CSS and jQuery related to the exposed filters:
  $form['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array('sbExportActionsData' => $view_data),
  );
  drupal_add_css('//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css', array('type' => 'external'));
  $form['#attached']['css'][] = drupal_get_path('module', 'springboard_export') . '/css/springboard_export.css';
  $form['#attached']['js'][] = drupal_get_path('module', 'springboard_export') . '/js/springboard_export.js';  
}

/**
 * Implements hook_menu().
 */
function springboard_export_menu() {
  $items = array();
  $items['springboard-export-queue-ajax'] = array(
    'title' => 'AJAX callback',
    'page callback' => '_springboard_export_queue_data_export',
    'access callback' => 'user_access',
    'access argument' => 'administer springboard advocacy',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * jQuery CSV Download button callback.
 *
 * This enqueues a CSV download request along with any filtering or sorting.
 */
function _springboard_export_queue_data_export() {
  if (!isset($_POST) || empty($_POST)) {
    drupal_json_output(array('status' => 'fail'));
    return;
  }

  $data = $_POST['export_params'];
  if (isset($data['source_view'])) {
    unset($data['source_view']);
  }

  if (isset($_POST['date_range_min'])) {
    $data['transaction_date']['min'] = $_POST['date_range_min'];
  }
  if (isset($_POST['date_range_max'])) {
    $data['transaction_date']['max'] = $_POST['date_range_max'];
  }

  watchdog('springboard_export', 'CSV export request: ' . json_encode($data));

  $recipients = array(
    'josh.estep@jacksonriver.com',
  );

  // Queue the data export job:
  $success = TRUE;
  //$success = springboard_dw_csv_export_insert('Drupal', $data, $recipients);

  // Return status to jQuery:

  drupal_json_output(array('status' => $success ? 'success' : 'fail'));
}
