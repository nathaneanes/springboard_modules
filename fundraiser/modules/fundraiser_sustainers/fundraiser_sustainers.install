<?php
/**
 * @file
 * Install, update and uninstall functions for the fundraiser module.
 */

/**
 * Implements hook_requirements().
 */
function fundraiser_sustainers_requirements($phase) {
  $requirements = array();
  if ($phase == 'runtime') {
    // Check for the key existing.
    $key_exists = fundraiser_sustainers_sustainer_key_file_exists();

    // Array of text vars for the message.
    $exists_vars = array(
      '@exists' => $key_exists ? 'exists' : 'does not exist',
    );

    $requirements['fundraiser_sustainers_key_exists'] = array(
      'title' => t('Fundraiser sustainer key'),
      'description' => t('The key file @exists in the correct place in the file system.', $exists_vars),
      'value' => $key_exists ? t('File exists') : t('File does not exist'),
      'severity' => $key_exists ? REQUIREMENT_OK : REQUIREMENT_WARNING,
      'weight' => '-1000',
    );

    // Check for the site and key values matching
    $key_value = fundraiser_sustainers_get_sustainer_key_value();
    if (!$key_value) {
      $key_value = t('NO VALUE SET');
    }

    $key_match_for_environment = fundraiser_sustainers_processor_key_match();

    // Array of text vars for the message
    $configured_vars = array(
      '@match' => $key_match_for_environment ? 'matches' : 'does not match',
      '@key_value' => $key_value,
      '@site' => $_SERVER['HTTP_HOST'] . rtrim(base_path(), '/'),
    );

    $requirements['fundraiser_sustainers_key_configured'] = array(
      'title' => t('Fundraiser sustainer key match'),
      'description' => t("The key file's value (@key_value) @match the current site's hostname and path (@site)", $configured_vars),
      'value' => $key_match_for_environment ? t('Yes') : ('No'),
      'severity' => $key_match_for_environment ? REQUIREMENT_OK : REQUIREMENT_WARNING,
      'weight' => '-999',
    );
  }
  return $requirements;
}

/**
 * Implements hook_schema().
 */
function fundraiser_sustainers_schema() {
  $schema['fundraiser_sustainers_nodes'] = array(
    'description' => 'Stores additional sustainer information per fundraising node.',
    'fields' => array(
      'nid' => array(
        'description' => 'Fundraiser node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'recurring_setting' => array(
        'description' => 'The recurring display setting for this node.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'user_choice', // user_choice, always, never
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['fundraiser_sustainers'] = array(
    'description' => 'Stores information about recurring orders.',
    'fields' => array(
      'master_did' => array(
        'description' => 'Master donation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'description' => 'This specific recurring donation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'next_charge' => array(
        'description' => 'When to charge the donation next.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      // TODO strongly consider moving these to another table.
      'sf_opportunity_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '40',
        'not null' => FALSE,
      ),
      'sf_recurring_id' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'not null' => FALSE,
      ),
      'sf_stagename' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'sf_sync_status' => array(
        'description' => 'TODO: please describe this field!',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      // SF fields should not be here.
      'gateway_resp' => array(
        'description' => 'Gateway response to the charge.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'attempts' => array(
        'description' => 'Number of attempts made to charge.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'cancellation_reason' => array(
        'description' => 'If cancelled, reason why.',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'sustainer_key' => array(
        'description' => 'Value of the sustainer key at the time of record creation.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'lock_id' => array(
        'description' => t('Lock id for recurring batches to prevent requeue.'),
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
        'default' => '0',
      ),
      'revision_id' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the sustainer record\'s default revision.',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the sustainer record was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the sustainer record was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('did'),
    'indexes' => array(
      'master_did' => array('master_did'),
      'attempts_gateway_lock_next' => array('attempts', 'gateway_resp', 'lock_id', 'next_charge'),
      'did_gateway_master' => array('did', 'gateway_resp', 'master_did'),
      'did_lock_next' => array('did', 'lock_id', 'next_charge'),
      'did_master' => array('did', 'master_did'),
      'gateway_master' => array('gateway_resp', 'master_did'),
      'lock_next' => array('lock_id', 'next_charge'),
      'master_next_charge' => array('master_did', 'next_charge'),
    ),
    'foreign keys' => array(
      'current_revision' => array(
        'table' => 'fundraiser_sustainers_revision',
        'columns'=> array('revision_id' => 'revision_id'),
      ),
    ),
  );

  $schema['fundraiser_sustainers_log'] = array(
    'description' => 'Stores the result of sustainer processing.',
    'fields' => array(
      'lid' => array(
        'description' => 'Unqiue id of the log entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'description' => 'The id of the donation being processed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gateway' => array(
        'description' => 'The gateway that was used to process the charge.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'date_processed' => array(
        'description' => 'The date the charge was processed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'success' => array(
        'description' => 'Flag to indicate whether the charge was successful or not.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'lock_id' => array(
        'description' => 'The if of the lock that was put on the records during processing.',
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
        'default' => '0',
      ),
    ),
    'primary key' => array('lid'),
  );

  $schema['fundraiser_sustainers_charge_date'] = array(
    'description' => 'Stores information about admin-changed donation dates.',
    'fields' => array(
      'master_did' => array(
        'description' => 'Master donation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'day' => array(
        'description' => 'The numeric day of month.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('master_did'),
  );

  $schema['fundraiser_sustainers_revision'] = array(
    'description' => 'Stores revision information about recurring donations.',
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique revision ID.',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'master_did' => array(
        'description' => 'Master donation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the attached sustainer record.',
      ),
      'next_charge' => array(
        'description' => 'When to charge the donation next.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gateway_resp' => array(
        'description' => 'Gateway response to the charge.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'attempts' => array(
        'description' => 'Number of attempts made to charge.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'cancellation_reason' => array(
        'description' => 'If cancelled, reason why.',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'sustainer_key' => array(
        'description' => 'Value of the sustainer key at the time of record creation.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'lock_id' => array(
        'description' => t('Lock id for recurring batches to prevent requeue.'),
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
        'default' => '0',
      ),
    ),
    'primary key' => array('revision_id'),
    'foreign keys' => array(
      'sustainer' => array(
        'table' => 'fundraiser_sustainers',
        'columns'=> array('did' => 'did'),
      ),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function fundraiser_sustainers_install() {
  // First we need to checkif old data from old tables is still around.
  // If we've never pulled any of this data before, we need to move it over.
  if (db_table_exists('fundraiser_recurring')) {
    // Copy all data over from the old fundraiser_recurring table to the new table in the correct location.
    db_query('INSERT INTO {fundraiser_sustainers} ' .
      '(master_did, did, next_charge, sf_opportunity_id, sf_recurring_id, sf_stagename, sf_sync_status, ' .
        'gateway_resp, attempts, cancellation_reason) ' .
      'SELECT master_order_id, order_id, next_charge, sf_opportunity_id, sf_recurring_id, sf_stagename, sf_sync_status, ' .
        'gateway_resp, attempts, cancellation_reason ' .
      'FROM {fundraiser_recurring}');

    // The table doesn't go away yet, because we may still need it for fundraiser.
    // But if fundraiser has flagged that it's done porting data, we can drop it.
    if (variable_get('fundraiser_port_recurring_done', FALSE)) {
      db_drop_table('fundraiser_recurring');
      variable_del('fundraiser_port_recurring_done');
    }
  }
}

/**
 * Implements hook_enable().
 */
function fundraiser_sustainers_enable() {
  // Create default SF map insert into table.
  if (function_exists('salesforce_genmap_save_map')) {
    _fundraiser_sustainers_install_default_sf_map();
  }
}

/**
 * Implements hook_modules_enabled().
 */
function fundraiser_sustainers_modules_enabled($modules) {
  if (in_array('salesforce_genmap', $modules)) {
    // Create default SF map insert into table.
    if (function_exists('salesforce_genmap_save_map')) {
      _fundraiser_sustainers_install_default_sf_map();
    }
  }
}

/**
 * Helper function, adding default salesforce map if needed.
 */
function _fundraiser_sustainers_install_default_sf_map() {
  if (module_exists('salesforce_genmap')) {
    $map = salesforce_genmap_load_map(-1, 'fundraiser_sustainers');
    if (empty($map)) {
      $map = array();
      $map = entity_create('salesforce_genmap_map', $map);
      $map->nid = -1;
      $map->map_handler = 'fundraiser_sustainers';
      $map->salesforce_object_type = 'npe03__Recurring_Donation__c';
      $object_type = '';
      //module_load_include('inc', 'salesforce_genmap', 'includes/salesforce_genmap.map');
      //if (function_exists('salesforce_get_api')) {
      //  $sfapi = salesforce_get_api();
      //  if ($sfapi->isAuthorized()) {
      //    if (function_exists('_sfw_salesforce_record_type_list')) {
      //      $sf_records = _sfw_salesforce_record_type_list($sfapi, 'npe03__Recurring_Donation__c');
      //      $sf_records = array_flip($sf_records);
      //      $object_type = $sf_records['Donation'];
      //    }
      //  }
      //}
      // There seems to be no subtype record type for recurring donations, so leaving this out.
      $map->salesforce_record_type = $object_type;
      $map->field_map = array(
        'fundraiser_sustainers_map' => array(
          'full_name' => 'Name',
          'amount' => 'npe03__Amount__c',
          'contact' => 'npe03__Contact__c',
          'installment_period' => 'npe03__Installment_Period__c',
          'schedule_type' => 'npe03__Schedule_Type__c',
          'installments' => 'npe03__Installments__c',
          'last_payment_date' => 'npe03__Last_Payment_Date__c',
          'next_payment_date' => 'npe03__Next_Payment_Date__c',
        ),
      );
      $map->sync_options = array(
        'insert' => 'insert',
        'update' => 'update',
        'delete' => 'delete',
      );
      $map->status = 1;
      $map->module = 'fundraiser_sustainers';
      salesforce_genmap_save_map($map, 'fundraiser_sustainers');
    }
  }
}

/**
 * Update 7001.
 *
 * Adds an additional field to fundraiser_sustainers that will store the
 * value of the sustainer key at the time of donation. This key is then
 * checked before the sustainer is actually charged to ensure the charge
 * is taking place in the original environment.
 */
function fundraiser_sustainers_update_7001(&$sandbox) {
  // Add the new column.
  $sustainer_key = array(
    'description' => t('Value of the sustainer key at the time of record creation.'),
    'type' => 'varchar',
    'length' => '255',
    'not null' => FALSE,
    'default' => '',
  );
  db_add_field('fundraiser_sustainers', 'sustainer_key', $sustainer_key);
  // Read key and update existing sustainer records.
  $key = fundraiser_sustainers_get_sustainer_key_value();
  $sustainers_updated = db_update('fundraiser_sustainers')
  ->fields(array(
    'sustainer_key' => $key,
  ))
  ->execute();
  return array();
}

/**
 * Update 7002.
 *
 * Adds an additional field to fundraiser_sustainers that will store the
 * value of the lock key at the time of processing recurring donations.
 * This is to prevent concurrent runs picking up the same donations and re-running them.
 */
function fundraiser_sustainers_update_7002(&$sandbox) {
  $field = array(
    'lock_id' => array(
      'description' => t('Lock id for recurring batches to prevent requeue.'),
      'type' => 'varchar',
      'length' => '55',
      'not null' => FALSE,
      'default' => '0',
    ),
  );
  db_add_field('fundraiser_sustainers', 'lock_id', $field['lock_id']);
  return array();
}

/**
 * Update 7003.
 *
 * Adds an additional table to fundraiser_sustainers that will store the
 * valueof the recurring option display configuration per node.
 */
function fundraiser_sustainers_update_7004(&$sandbox) {
  $schema['fundraiser_sustainers_nodes'] = array(
    'description' => 'Stores additional sustainer information per fundraising node.',
    'fields' => array(
      'nid' => array(
        'description' => 'Fundraiser node.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'recurring_setting' => array(
        'description' => 'The recurring display setting for this node.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => TRUE,
        'default' => 'user_choice', // user_choice, always, never
      ),
    ),
    'primary key' => array('nid'),
  );
  db_create_table('fundraiser_sustainers_nodes', $schema['fundraiser_sustainers_nodes']);
  return array();
}

/**
 * Add indexes to tables.
 */
function fundraiser_sustainers_update_7005() {
  db_add_index('fundraiser_sustainers', 'master_did', array('master_did'));
  db_add_index('fundraiser_sustainers', 'attempts_gateway_lock_next', array('attempts', 'gateway_resp', 'lock_id', 'next_charge'));
  db_add_index('fundraiser_sustainers', 'did_gateway_master', array('did', 'gateway_resp', 'master_did'));
  db_add_index('fundraiser_sustainers', 'did_lock_next', array('did', 'lock_id', 'next_charge'));
  db_add_index('fundraiser_sustainers', 'did_master', array('did', 'master_did'));
  db_add_index('fundraiser_sustainers', 'gateway_master', array('gateway_resp', 'master_did'));
  db_add_index('fundraiser_sustainers', 'lock_next', array('lock_id', 'next_charge'));
  db_add_index('fundraiser_sustainers', 'master_next_charge', array('master_did', 'next_charge'));

  return t('Added indexes to {fundraiser_sustainers} table.');
}

/**
 * Adds an additional table to log the results of sustainer processing.
 */
function fundraiser_sustainers_update_7006(&$sandbox) {
  $schema['fundraiser_sustainers_log'] = array(
    'description' => 'Stores the result of sustainer processing.',
    'fields' => array(
      'lid' => array(
        'description' => 'Unqiue id of the log entry.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'description' => 'The id of the donation being processed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gateway' => array(
        'description' => 'The gateway that was used to process the charge.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => TRUE,
      ),
      'date_processed' => array(
        'description' => 'The date the charge was processed.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'success' => array(
        'description' => 'Flag to indicate whether the charge was successful or not.',
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'lock_id' => array(
        'description' => 'The if of the lock that was put on the records during processing.',
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
        'default' => '0',
      ),
    ),
    'primary key' => array('lid'),
  );
  db_create_table('fundraiser_sustainers_log', $schema['fundraiser_sustainers_log']);
}

/**
 * Adds an additional table to store changed cahrge dates.
 */
function fundraiser_sustainers_update_7007() {
  if (!db_table_exists('fundraiser_sustainers_charge_date')) {
    $schema = drupal_get_schema('fundraiser_sustainers_charge_date', TRUE);
    db_create_table('fundraiser_sustainers_charge_date', $schema);
  }
}

/**
 * Rebuilds the registry to find the new Health Checks class.
 */
function fundraiser_sustainers_update_7008() {
  registry_rebuild();
}

/**
 * Adds revision support to sustainer records.
 */
function fundraiser_sustainers_update_7009() {
  // Find new entity classes.
  registry_rebuild();

  $revision_id = array(
    'type' => 'int',
    'unsigned' => TRUE,
    'not null' => FALSE,
    'default' => NULL,
    'description' => 'The ID of the sustainer record\'s default revision.',
    'initial' => NULL,
  );

  db_add_field('fundraiser_sustainers', 'revision_id', $revision_id);

  $created = array(
    'description' => 'The Unix timestamp when the sustainer record was created.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'initial' => REQUEST_TIME,
  );

  db_add_field('fundraiser_sustainers', 'created', $created);

  $changed = array(
    'description' => 'The Unix timestamp when the sustainer record was most recently saved.',
    'type' => 'int',
    'not null' => TRUE,
    'default' => 0,
    'initial' => REQUEST_TIME,
  );

  db_add_field('fundraiser_sustainers', 'changed', $changed);

  $schema = array(
    'description' => 'Stores revision information about recurring donations.',
    'fields' => array(
      'revision_id' => array(
        'type' => 'serial',
        'not null' => TRUE,
        'description' => 'Primary Key: Unique revision ID.',
      ),
      'revision_timestamp' => array(
        'description' => 'The Unix timestamp when this revision was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'log' => array(
        'description' => 'The log entry explaining the changes in this version.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
      ),
      'master_did' => array(
        'description' => 'Master donation id.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'did' => array(
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => FALSE,
        'default' => NULL,
        'description' => 'The ID of the attached sustainer record.',
      ),
      'next_charge' => array(
        'description' => 'When to charge the donation next.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'gateway_resp' => array(
        'description' => 'Gateway response to the charge.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
      ),
      'attempts' => array(
        'description' => 'Number of attempts made to charge.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'cancellation_reason' => array(
        'description' => 'If cancelled, reason why.',
        'type' => 'varchar',
        'length' => '500',
        'not null' => FALSE,
      ),
      'sustainer_key' => array(
        'description' => 'Value of the sustainer key at the time of record creation.',
        'type' => 'varchar',
        'length' => '255',
        'not null' => FALSE,
        'default' => '',
      ),
      'lock_id' => array(
        'description' => t('Lock id for recurring batches to prevent requeue.'),
        'type' => 'varchar',
        'length' => '55',
        'not null' => FALSE,
        'default' => '0',
      ),
    ),
    'primary key' => array('revision_id'),
    'foreign keys' => array(
      'sustainer' => array(
        'table' => 'fundraiser_sustainers',
        'columns'=> array('did' => 'did'),
      ),
    ),
  );

  db_create_table('fundraiser_sustainers_revision', $schema);
}
